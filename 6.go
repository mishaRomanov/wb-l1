//6. Реализовать все возможные способы остановки выполнения горутины.

package main

import (
	"runtime"
	"time"
)

func main() {
	// один из способов остановки горутины - вызов функции Goexit из пакета runtime
	runtime.Goexit()
	// эта функция останавливает И ЗАВЕРШАЕТ выполнение горутины, но при этом стэк деферов
	// все равно выполняется, потому что он должен опустошиться

	// ---------------------
	// также еще способ остановки выполнения горутины - вызов функции из пакета time
	time.Sleep(1 * time.Second)
	// эта функция останавливает выполнение горутины на заданное внутри время

	// ---------------------
	// Также к остановке выполнения горутины может привести чтение из небуферизированного канала
	// если мы читаем канал, горутина блокируется, пока из этого канала не придет то или иное значение.
	// то есть, пока он не будет прочитан
	exampleChan := make(chan struct{})
	<-exampleChan

  //----------------------
  //также остановить горутину можно при помощи контекста с таймаутом, который 
  //мы передаем в функцию. по истечении таймаута срабатывает функция Done(), которая закрывает возвращаемый ею канал
  //тем самым посылая сигнал о том, что контекст отменен.
  func testfunc(ctx context.Context){
    for {
      select{ 
          case <- ctx.Done():
            fmt.Println("Received a stop signal")
            return 
          default:
            fmt.Println("Still working. No interruption signal received.")
    }
    }
  }
}
  //дополняя пример выше, мы можем вручную отменить контекст, не дожидаясь таймаута
ctx, cancel := context.WithTimeout(context.Background,time.Second * 5)
//вызываем функцию отмены, она сигнализирует функции Done об отмене, а та уже, в свою очередь, закрывает канал
cancel()

//---------------
//мы также можем использовать каналы для отмены выполнения горутины. 
//для этого понадобится отдельный канал, в который при необходимости мы посылаем значение, тем самым сигнализируя 
//что выполнение стоит прекратить
func cancelChannelfunc(stop chan struct{}){
  for {
    select {
    case <-stop:
      return 
    default:
      fmt.Println("Working")
  }
  }
}
